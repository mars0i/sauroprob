;; Ad-hoc functions for use in iterfreqs.clj
(ns sauroprob.iterfreqs-fns
  (:require ;[clojure.math :as m]
            [scicloj.tableplot.v1.plotly :as plotly]
            [scicloj.kindly.v4.kind :as kind]
            [scicloj.kindly.v4.api :as kindly]
            [tablecloth.api :as tc]
            [utils.misc :as msc]
            [utils.math :as um]
            [sauroprob.plotly :as sp]))

;; Make LaTeX work in Plotly labels:
(kind/hiccup [:script {:src "https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js?config=TeX-AMS_CHTML"}])

;; Note the use of \text{} to display text on the same line as LaTeX without using Quarto:

;; TODO Should this be changed to allow layering of arbitrary plots in the
;; first plot, rather than only allowing numbers of function plots to be
;; added?  Or is the latter sufficiently general?
(defn three-plots
  "Displays a plot of a function, possibly with iteration lines; a plot of
  values against (discrete) time generated by iteration, and a histogram of
  those values. See comments for details about args."
  [& {:keys [x-max  ; max x val in function plot (also max y)
             fs     ; functions to plot
             labels ; labels corresponding to functions
             init-x ; initial x val for iterations--Uses the first element in fs.
             n-iter-lines ; how many iteration lines in fn plot
             n-plot-iterates ; how many iterations in plot of iteration values
             n-hist-iterates]}] ; how many iterations to collect in histogram
  (let [basef (first fs)
        iterates (iterate basef init-x)]
    (kind/fragment [(kind/md ["Plot of the function, with sample iterations beginning from " init-x ":"])
                    (-> (tc/concat (sp/iter-lines init-x n-iter-lines :fun "iteration" basef)
                                   (tc/dataset {:x [0 x-max], :y [0 x-max], :fun "$y=x$"})
                                   (apply tc/concat ; maybe there's a more elegant way to do this
                                          (map (fn [label f] (sp/fn2dataset [0 x-max] :fun label f))
                                               labels fs))
                                   ;(sp/fn2dataset [0 x-max] :fun "f" f)
                                   ;(sp/fn2dataset [0 x-max] :fun "$f^2$" (msc/n-comp f 2))
                        )
                        (plotly/base {:=height 400 :=width 550})
                        (plotly/layer-line {:=x :x, :=y, :y :=color :fun})
                        (sp/equalize-display-units) ; runs plotly/plot
                        (sp/set-line-width 0 1.5)
                        (sp/set-line-dash 0 "dot")
                        (sp/set-line-dash 1 "dash"))

                    (kind/md ["Plot of a sequence of values of the function beginning from " init-x ":"])
                    (-> (tc/dataset {:x (range n-plot-iterates)
                                     :y (take n-plot-iterates iterates)})
                        (plotly/base {:=height 400 :=width 800})
                        (plotly/layer-line {:=x :x, :=y, :y})
                        plotly/plot
                        (assoc-in [:data 0 :line :width] 1))

                    (kind/md ["Distribution of values beginning from " init-x ":"])
                    (-> (tc/dataset {:x (take n-hist-iterates iterates)})
                        (plotly/base {:=height 400 :=width 800})
                        (plotly/layer-histogram {:=x :x
                                                 :=histogram-nbins 200}))
                    ])))
